import os
import shutil
from flask import Flask, render_template

def generate_static_site():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–µ–π
    app = Flask(__name__, 
                template_folder='templates',
                static_folder='static')
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
    @app.route('/')
    def index():
        return render_template('index.html', 
                             title='–ì–ª–∞–≤–Ω–∞—è - –ù–∞–∏—Ä',
                             active_page='index')
    
    @app.route('/karta')
    def karta():
        return render_template('karta.html',
                             title='–ö–∞—Ä—Ç–∞ - –ù–∞–∏—Ä', 
                             active_page='karta')
    
    @app.route('/lor')
    def lor():
        return render_template('lor.html',
                             title='–õ–æ—Ä - –ù–∞–∏—Ä',
                             active_page='lor')
    
    @app.route('/ankety')
    def ankety():
        return render_template('ankety.html',
                             title='–ê–Ω–∫–µ—Ç—ã - –ù–∞–∏—Ä', 
                             active_page='ankety')
    
    # –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    output_dir = "docs"
    
    # –û—á–∏—â–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if os.path.exists(output_dir):
        print(f"üßπ –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É {output_dir}...")
        shutil.rmtree(output_dir)
    
    os.makedirs(output_dir)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {output_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏...")
    if not os.path.exists('templates'):
        print("‚ùå –ü–∞–ø–∫–∞ templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É templates —Å —Ñ–∞–π–ª–∞–º–∏: base.html, index.html –∏ —Ç.–¥.")
        return False
    
    if not os.path.exists('static'):
        print("‚ùå –ü–∞–ø–∫–∞ static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    print("üì∏ –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...")
    shutil.copytree('static', os.path.join(output_dir, 'static'))
    print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –µ—Å—Ç—å
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
    templates = os.listdir('templates')
    for template in templates:
        print(f"   üìÑ {template}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã Flask –ø—É—Ç–µ–π –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
    def fix_urls(html_content):
        replacements = {
            "{{ url_for('static', filename='": "static/",
            "{{ url_for('index') }}": "index.html",
            "{{ url_for('karta') }}": "karta.html", 
            "{{ url_for('lor') }}": "lor.html",
            "{{ url_for('ankety') }}": "ankety.html",
            "') }}": ""  # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
        }
        
        for old, new in replacements.items():
            html_content = html_content.replace(old, new)
            
        return html_content
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    print("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    pages = [
        ('index.html', 'index.html', {'title': '–ì–ª–∞–≤–Ω–∞—è - –ù–∞–∏—Ä', 'active_page': 'index'}),
        ('karta.html', 'karta.html', {'title': '–ö–∞—Ä—Ç–∞ - –ù–∞–∏—Ä', 'active_page': 'karta'}),
        ('lor.html', 'lor.html', {'title': '–õ–æ—Ä - –ù–∞–∏—Ä', 'active_page': 'lor'}),
        ('ankety.html', 'ankety.html', {'title': '–ê–Ω–∫–µ—Ç—ã - –ù–∞–∏—Ä', 'active_page': 'ankety'})
    ]
    
    with app.test_request_context():
        for filename, template_name, context in pages:
            print(f"  üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {filename} –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_name}...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                template_path = os.path.join('templates', template_name)
                if not os.path.exists(template_path):
                    print(f"    ‚ùå –®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    continue
                
                # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                html = render_template(template_name, **context)
                fixed_html = fix_urls(html)
                
                with open(os.path.join(output_dir, filename), 'w', encoding='utf-8') as f:
                    f.write(fixed_html)
                print(f"    ‚úÖ {filename} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {filename}: {str(e)}")
                # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                error_html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .error {{ background: #ffe6e6; padding: 20px; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class="error">
        <h1>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {filename}</h1>
        <p><strong>–®–∞–±–ª–æ–Ω:</strong> {template_name}</p>
        <p><strong>–û—à–∏–±–∫–∞:</strong> {str(e)}</p>
        <p><strong>–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:</strong> {os.getcwd()}</p>
        <p><strong>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã:</strong> {', '.join(os.listdir('templates')) if os.path.exists('templates') else '–ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}</p>
    </div>
</body>
</html>
"""
                with open(os.path.join(output_dir, filename), 'w', encoding='utf-8') as f:
                    f.write(error_html)
    
    # –°–æ–∑–¥–∞–µ–º .nojekyll —Ñ–∞–π–ª
    with open(os.path.join(output_dir, '.nojekyll'), 'w') as f:
        f.write('')
    
    print(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ {output_dir}!")
    return True

if __name__ == '__main__':
    success = generate_static_site()
    exit(0 if success else 1)