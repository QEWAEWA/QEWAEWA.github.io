import os
import shutil
from flask import Flask, render_template

class StaticSiteGenerator:
    def __init__(self):
        self.app = Flask(__name__, 
                        template_folder='templates',
                        static_folder='static')
        self.output_dir = "docs"
        self.setup_routes()
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""
        @self.app.route('/')
        def index():
            return render_template('index.html', 
                                 title='–ì–ª–∞–≤–Ω–∞—è - –ù–∞–∏—Ä',
                                 active_page='index')
        
        @self.app.route('/karta')
        def karta():
            return render_template('karta.html',
                                 title='–ö–∞—Ä—Ç–∞ - –ù–∞–∏—Ä', 
                                 active_page='karta')
        
        @self.app.route('/lor')
        def lor():
            return render_template('lor.html',
                                 title='–õ–æ—Ä - –ù–∞–∏—Ä',
                                 active_page='lor')
        
        @self.app.route('/ankety')
        def ankety():
            return render_template('ankety.html',
                                 title='–ê–Ω–∫–µ—Ç—ã - –ù–∞–∏—Ä', 
                                 active_page='ankety')
    
    def clean_output_dir(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if os.path.exists(self.output_dir):
            shutil.rmtree(self.output_dir)
        os.makedirs(self.output_dir)
    
    def copy_static_files(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        if os.path.exists('static'):
            shutil.copytree('static', os.path.join(self.output_dir, 'static'))
            return True
        return False
    
    def fix_urls(self, html_content):
        """–ó–∞–º–µ–Ω–∞ Flask url_for –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏"""
        replacements = {
            "{{ url_for('static', filename='": "static/",
            "{{ url_for('index') }}": "index.html",
            "{{ url_for('karta') }}": "karta.html", 
            "{{ url_for('lor') }}": "lor.html",
            "{{ url_for('ankety') }}": "ankety.html",
            "') }}": ""
        }
        
        for old, new in replacements.items():
            html_content = html_content.replace(old, new)
        
        return html_content
    
    def generate_pages(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü"""
        pages_config = [
            ('index.html', 'index.html', {
                'title': '–ì–ª–∞–≤–Ω–∞—è - –ù–∞–∏—Ä',
                'active_page': 'index'
            }),
            ('karta.html', 'karta.html', {
                'title': '–ö–∞—Ä—Ç–∞ - –ù–∞–∏—Ä', 
                'active_page': 'karta'
            }),
            ('lor.html', 'lor.html', {
                'title': '–õ–æ—Ä - –ù–∞–∏—Ä',
                'active_page': 'lor'
            }),
            ('ankety.html', 'ankety.html', {
                'title': '–ê–Ω–∫–µ—Ç—ã - –ù–∞–∏—Ä', 
                'active_page': 'ankety'
            })
        ]
        
        with self.app.test_request_context():
            for filename, template_name, context in pages_config:
                self.generate_page(filename, template_name, context)
    
    def generate_page(self, filename, template_name, context):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            html = render_template(template_name, **context)
            fixed_html = self.fix_urls(html)
            
            output_path = os.path.join(self.output_dir, filename)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(fixed_html)
            
            print(f"‚úÖ {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {filename}: {e}")
            self.create_error_page(filename, template_name, str(e))
    
    def create_error_page(self, filename, template_name, error):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—à–∏–±–∫–æ–π"""
        error_html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>–û—à–∏–±–∫–∞</title>
    <style>
        body {{ font-family: Arial; margin: 40px; }}
        .error {{ background: #ffe6e6; padding: 20px; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class="error">
        <h1>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {filename}</h1>
        <p><strong>–®–∞–±–ª–æ–Ω:</strong> {template_name}</p>
        <p><strong>–û—à–∏–±–∫–∞:</strong> {error}</p>
    </div>
</body>
</html>
"""
        output_path = os.path.join(self.output_dir, filename)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(error_html)
    
    def create_nojekyll(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ .nojekyll —Ñ–∞–π–ª–∞"""
        with open(os.path.join(self.output_dir, '.nojekyll'), 'w') as f:
            f.write('')
    
    def generate(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
        if not all(os.path.exists(folder) for folder in ['templates', 'static']):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏: templates –∏–ª–∏ static")
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.clean_output_dir()
        print("‚úÖ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        if not self.copy_static_files():
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
            return False
        print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü:")
        self.generate_pages()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.create_nojekyll()
        
        print(f"üéâ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ {self.output_dir}/")
        return True

def main():
    generator = StaticSiteGenerator()
    success = generator.generate()
    exit(0 if success else 1)

if __name__ == '__main__':
    main()