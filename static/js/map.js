class InteractiveMap {
    constructor(containerId, imageId) {
        console.log('üó∫Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã...');
        
        this.container = document.getElementById(containerId);
        this.image = document.getElementById(imageId);
        
        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', this.container);
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', this.image);
        
        if (!this.container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω! ID:', containerId);
            return;
        }
        
        if (!this.image) {
            console.error('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ID:', imageId);
            return;
        }
        
        this.isDragging = false;
        this.startX = 0;
        this.startY = 0;
        this.translateX = 0;
        this.translateY = 0;
        this.scale = 0.1; // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± - —É–º–µ–Ω—å—à–µ–Ω–∞
        
        this.minScale = 0.1;
        this.maxScale = 12;
        
        this.init();
    }
    
    init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (this.image.complete) {
            this.setupMap();
        } else {
            this.image.addEventListener('load', () => this.setupMap());
            this.image.addEventListener('error', () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã');
            });
        }
    }
    
    setupMap() {
        console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        this.image.style.cursor = 'grab';
        this.image.style.transformOrigin = '0 0';
        this.image.style.userSelect = 'none';
        this.image.style.webkitUserSelect = 'none';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        this.applyTransform(0, 0, this.scale);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        this.setupControls();
        
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    setupEventListeners() {
        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ –∫–∞—Å–∞–Ω–∏–π...');
        
        // –ú—ã—à—å
        this.container.addEventListener('mousedown', (e) => this.handleMouseDown(e));
        document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        document.addEventListener('mouseup', () => this.handleMouseUp());
        
        // –ö–∞—Å–∞–Ω–∏—è
        this.container.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: false });
        document.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
        document.addEventListener('touchend', () => this.handleTouchEnd());
        
        // –ö–æ–ª–µ—Å–æ –º—ã—à–∏
        this.container.addEventListener('wheel', (e) => this.handleWheel(e), { passive: false });
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
    
    setupControls() {
        console.log('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ ID
        this.resetBtn = document.getElementById('resetBtn');
        this.zoomInBtn = document.getElementById('zoomInBtn');
        this.zoomOutBtn = document.getElementById('zoomOutBtn');
        
        console.log('–ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞:', this.resetBtn);
        console.log('–ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è:', this.zoomInBtn);
        console.log('–ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è:', this.zoomOutBtn);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        if (this.resetBtn) {
            this.resetBtn.addEventListener('click', () => {
                console.log('üîÑ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞–∂–∞—Ç–∞');
                this.resetTransform();
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (this.zoomInBtn) {
            this.zoomInBtn.addEventListener('click', () => {
                console.log('‚ûï –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
                this.zoom(0.3);
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        if (this.zoomOutBtn) {
            this.zoomOutBtn.addEventListener('click', () => {
                console.log('‚ûñ –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
                this.zoom(-0.3);
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateButtonsState();
        
        console.log('üéõÔ∏è –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
    
    handleMouseDown(e) {
        if (e.button !== 0) return; // –¢–æ–ª—å–∫–æ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
        
        e.preventDefault();
        this.startDragging(e.clientX, e.clientY);
    }
    
    handleMouseMove(e) {
        if (!this.isDragging) return;
        e.preventDefault();
        this.drag(e.clientX, e.clientY);
    }
    
    handleMouseUp() {
        this.stopDragging();
    }
    
    handleTouchStart(e) {
        if (e.touches.length === 1) {
            e.preventDefault();
            this.startDragging(e.touches[0].clientX, e.touches[0].clientY);
        }
    }
    
    handleTouchMove(e) {
        if (e.touches.length === 1 && this.isDragging) {
            e.preventDefault();
            this.drag(e.touches[0].clientX, e.touches[0].clientY);
        }
    }
    
    handleTouchEnd() {
        this.stopDragging();
    }
    
    handleWheel(e) {
        e.preventDefault();
        const delta = Math.sign(e.deltaY) * -0.15;
        this.zoom(delta, e.clientX, e.clientY);
    }
    
    startDragging(clientX, clientY) {
        this.isDragging = true;
        this.startX = clientX;
        this.startY = clientY;
        
        const transform = this.getCurrentTransform();
        this.translateX = transform.x;
        this.translateY = transform.y;
        
        this.image.style.cursor = 'grabbing';
    }
    
    drag(clientX, clientY) {
        const dx = clientX - this.startX;
        const dy = clientY - this.startY;
        
        const newX = this.translateX + dx;
        const newY = this.translateY + dy;
        
        this.applyTransform(newX, newY, this.scale);
    }
    
    stopDragging() {
        this.isDragging = false;
        this.image.style.cursor = 'grab';
    }
    
    zoom(delta, clientX = null, clientY = null) {
        const newScale = Math.max(this.minScale, Math.min(this.maxScale, this.scale + delta));
        
        console.log(`üîç Zoom: ${this.scale.toFixed(2)} -> ${newScale.toFixed(2)}`);
        
        // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, zoom –∫ —Ü–µ–Ω—Ç—Ä—É
        if (clientX === null || clientY === null) {
            const rect = this.container.getBoundingClientRect();
            clientX = rect.left + rect.width / 2;
            clientY = rect.top + rect.height / 2;
        }
        
        const transform = this.getCurrentTransform();
        const rect = this.image.getBoundingClientRect();
        const containerRect = this.container.getBoundingClientRect();
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è zoom –∫ –∫—É—Ä—Å–æ—Ä—É
        const offsetX = clientX - containerRect.left - rect.left;
        const offsetY = clientY - containerRect.top - rect.top;
        
        const newX = transform.x - (newScale - this.scale) * offsetX / this.scale;
        const newY = transform.y - (newScale - this.scale) * offsetY / this.scale;
        
        this.applyTransform(newX, newY, newScale);
    }
    
    applyTransform(x, y, scale) {
        const clamped = this.clampTranslation(x, y, scale);
        
        this.image.style.transform = `translate(${clamped.x}px, ${clamped.y}px) scale(${scale})`;
        this.scale = scale;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateButtonsState();
        
        console.log(`üîÑ Transform: translate(${clamped.x.toFixed(1)}px, ${clamped.y.toFixed(1)}px) scale(${scale.toFixed(2)})`);
    }
    
    clampTranslation(x, y, scale) {
        const containerRect = this.container.getBoundingClientRect();
        const scaledWidth = this.image.naturalWidth * scale;
        const scaledHeight = this.image.naturalHeight * scale;
        
        const maxX = Math.min(0, containerRect.width - scaledWidth);
        const maxY = Math.min(0, containerRect.height - scaledHeight);
        
        return {
            x: Math.max(maxX, Math.min(0, x)),
            y: Math.max(maxY, Math.min(0, y))
        };
    }
    
    getCurrentTransform() {
        const style = window.getComputedStyle(this.image);
        if (!style.transform || style.transform === 'none') {
            return { x: 0, y: 0, scale: this.scale };
        }
        
        const matrix = new DOMMatrixReadOnly(style.transform);
        return {
            x: matrix.m41,
            y: matrix.m42,
            scale: matrix.a
        };
    }
    
    resetTransform() {
        console.log('üîÑ –°–±—Ä–æ—Å –∫–∞—Ä—Ç—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é');
        this.scale = 0.5;
        this.applyTransform(0, 0, this.scale);
    }
    
    updateButtonsState() {
        if (this.zoomInBtn) {
            const canZoomIn = this.scale < this.maxScale;
            this.zoomInBtn.disabled = !canZoomIn;
            this.zoomInBtn.style.opacity = canZoomIn ? '1' : '0.5';
            this.zoomInBtn.title = canZoomIn ? '–£–≤–µ–ª–∏—á–∏—Ç—å' : '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±';
        }
        
        if (this.zoomOutBtn) {
            const canZoomOut = this.scale > this.minScale;
            this.zoomOutBtn.disabled = !canZoomOut;
            this.zoomOutBtn.style.opacity = canZoomOut ? '1' : '0.5';
            this.zoomOutBtn.title = canZoomOut ? '–£–º–µ–Ω—å—à–∏—Ç—å' : '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±';
        }
        
        console.log(`üéõÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: ZoomIn=${!this.zoomInBtn?.disabled}, ZoomOut=${!this.zoomOutBtn?.disabled}`);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
window.resetMap = function() {
    if (window.map) {
        window.map.resetTransform();
    } else {
        console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    }
};

window.zoomIn = function() {
    if (window.map) {
        window.map.zoom(0.3);
    } else {
        console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    }
};

window.zoomOut = function() {
    if (window.map) {
        window.map.zoom(-0.3);
    } else {
        console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã...');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    setTimeout(() => {
        window.map = new InteractiveMap('mapContainer', 'mapImage');
        
        if (window.map && window.map.container) {
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
            console.log('üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
            console.log('   - –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ: –∑–∞–∂–∞—Ç—å –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –Ω–∞ –∫–∞—Ä—Ç–µ');
            console.log('   - –ú–∞—Å—à—Ç–∞–±: –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ +/-');
            console.log('   - –°–±—Ä–æ—Å: –∫–Ω–æ–ø–∫–∞ ‚ü≤');
        } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É!');
        }
    }, 100);
});

console.log('üó∫Ô∏è –°–∫—Ä–∏–ø—Ç –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º DOM...');